{"version":3,"sources":["util/asyncLoader.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["asyncLoader","_Component","_Component2","AsyncLoader","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","isUnm","state","component","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","C","react_default","createElement","props","Component","routes","path","name","exact","__webpack_require__","e","then","bind","pathNameList","forEach","item","RouteWithSubRoutes","route","Route","render","assign","MainRoute","Switch","map","i","router_RouteWithSubRoutes","app","BrowserRouter","Fragment","router","React","Boolean","window","location","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0b50fee.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nconst asyncLoader = _Component =>\r\n{\r\n\tclass AsyncLoader extends Component {\r\n\t\tisUnm = false\r\n\t\tstate = {\r\n\t\t\tcomponent: null\r\n\t\t}\r\n\r\n\t\tasync componentDidMount()\r\n\t\t{\r\n\t\t\tconst {default: component} = await _Component()\r\n\t\t\tif (!this.isUnm)\r\n\t\t\t{\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcomponent: component\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcomponentWillUnmount()\r\n\t\t{\r\n\t\t\tthis.isUnm = true\r\n\t\t}\r\n\r\n\t\trender()\r\n\t\t{\r\n\t\t\tconst C = this.state.component\r\n\t\t\treturn C ? <C {...this.props} /> : null;\r\n\t\t}\r\n\t}\r\n\r\n\treturn AsyncLoader\r\n}\r\nexport default asyncLoader","import React from \"react\";\nimport asyncLoader from \"../util/asyncLoader\";\nimport {Route, Switch} from \"react-router-dom\";\n\nconst routes = [\n    {\n\t\tpath: '/',\n        name: 'home',\n        exact: true,\n\t\tcomponent: asyncLoader(() => import(/* webpackChunkName: \"home\" */'../containers/Home')),\n\t},\n\t{\n\t\tpath: '/home',\n\t\tname: 'home',\n\t\tcomponent: asyncLoader(() => import(/* webpackChunkName: \"home\" */'../containers/Home')),\n\t},\n\t{\n\t\tpath: '/game/:seoname',\n\t\tname: 'game',\n\t\tcomponent: asyncLoader(() => import(/* webpackChunkName: \"game\" */'../containers/Game')),\n\t},\n\t{\n\t\tpath: '/schedule',\n\t\tname: 'schedule',\n\t\tcomponent: asyncLoader(() => import(/* webpackChunkName: \"schedule\" */'../containers/Schedule')),\n\t},\n];\n\nlet pathNameList = {};\nroutes.forEach(item => pathNameList[item.path] = item.name);\n\nexport const pathList = pathNameList;\n\nconst RouteWithSubRoutes = route => (\n\t\t<Route path={route.path}\n                exact={!!route.exact}\n                render={props => (    \n                    <route.component {...props} routes={route.routes}/>\n                )}\n\t\t/>\n);\n\nconst MainRoute = () => (\n\t\t<Switch>\n\t\t\t{routes.map((route, i) => (\n\t\t\t\t\t<RouteWithSubRoutes key={i} {...route}/>\n            ))}\n            <Route path=\"*\" component={asyncLoader(() => import(/* webpackChunkName: \"notfound\" */'../containers/NotFound'))} />\n\t\t</Switch>\n);\n\nexport default MainRoute","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link} from \"react-router-dom\";\nimport MainRoute from \"./router\";\n\n\nconst appServer = \"https://elevensportsukstage.neulion.com\";\n\n\nclass app extends React.Component{\n    render(){\n        return (\n            <Router>\n                <React.Fragment>\n                    <MainRoute />\n                </React.Fragment>\n            </Router>\n        )\n    }\n\n    \n    \n};\n\nexport default app;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}